/* Script for ld -r: link without relocation */
/* Copyright (C) 2014 Free Software Foundation, Inc.
   Copying and distribution of this script, with or without modification,
   are permitted in any medium without royalty provided the copyright
   notice and this notice are preserved.  */
OUTPUT_FORMAT("elf32-iq2000", "elf32-iq2000",
	      "elf32-iq2000")
OUTPUT_ARCH(iq2000)
 /* For some reason, the Solaris linker makes bad executables
  if gld -r is used and the intermediate file has sections starting
  at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld
  bug.  But for now assigning the zero vmas works.  */
SECTIONS
{
  .interp   0 : { *(.interp) 	}
  .rel.init    0 : { *(.rel.init)	}
  .rela.init   0 : { *(.rela.init)	}
  .rel.text    0 :
    {
      *(.rel.text)
    }
  .rela.text   0 :
    {
      *(.rela.text)
    }
  .rel.fini    0 : { *(.rel.fini)	}
  .rela.fini   0 : { *(.rela.fini)	}
  .rel.rodata  0 :
    {
      *(.rel.rodata)
    }
  .rela.rodata 0 :
    {
      *(.rela.rodata)
    }
  .rel.data    0 :
    {
      *(.rel.data)
    }
  .rela.data   0 :
    {
      *(.rela.data)
    }
  .rel.ctors   0 : { *(.rel.ctors)	}
  .rela.ctors  0 : { *(.rela.ctors)	}
  .rel.dtors   0 : { *(.rel.dtors)	}
  .rela.dtors  0 : { *(.rela.dtors)	}
  .rel.got     0 : { *(.rel.got)		}
  .rela.got    0 : { *(.rela.got)		}
  .rel.sdata   0 :
    {
      *(.rel.sdata)
    }
  .rela.sdata   0 :
    {
      *(.rela.sdata)
    }
  .rel.sbss    0 :
    {
      *(.rel.sbss)
    }
  .rela.sbss   0 :
    {
      *(.rela.sbss)
    }
  .rel.sdata2  0 :
    {
      *(.rel.sdata2)
    }
  .rela.sdata2 0 :
    {
      *(.rela.sdata2)
    }
  .rel.sbss2   0 :
    {
      *(.rel.sbss2)
    }
  .rela.sbss2  0 :
    {
      *(.rela.sbss2)
    }
  .rel.bss     0 :
    {
      *(.rel.bss)
    }
  .rela.bss    0 :
    {
      *(.rela.bss)
    }
  .rel.plt     0 : { *(.rel.plt)		}
  .rela.plt    0 : { *(.rela.plt)		}
  .init        0 :
  {
    KEEP (*(.init))
  } =0
  .plt    0 : { *(.plt)	}
  .text    0 :
  {
    *(.text)
    *(.stub)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
  } =0
  .fini    0 :
  {
    KEEP (*(.fini))
  } =0
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  .data  0 :
  {
    *(.data)
  }
  .data1 0 : { *(.data1) }
  .eh_frame 0 :
  {
    *(.eh_frame)
    LONG (0);
  }
  .gcc_except_table : { *(.gcc_except_table) }
  .hash        0 : { *(.hash)		}
  .dynsym      0 : { *(.dynsym)		}
  .dynstr      0 : { *(.dynstr)		}
  .gnu.version 0 : { *(.gnu.version)	}
  .gnu.version_d 0 : { *(.gnu.version_d)	}
  .gnu.version_r 0 : { *(.gnu.version_r)	}
  .rodata 0 : { *(.rodata)   }
  .rodata1 0 : { *(.rodata1) }
  .sdata2 0 : { *(.sdata2)   }
  .sbss2 0 : { *(.sbss2)   }
  .dynamic     0 : { *(.dynamic) }
  .jcr : { KEEP (*(.jcr)) }
  .got		0 : { *(.got.plt) *(.got) }
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata   0 :
  {
    *(.sdata)
  }
  .sbss    0 :
  {
    *(.dynsbss)
    *(.sbss)
    *(.scommon)
  }
  .bss     0 :
  {
   *(.dynbss)
   *(.bss)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
  }
  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) }
  /* These must appear regardless of .  */
}
